# -*- coding: utf-8 -*-
"""multivariate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IcrhqW8zODlPs7OvO0U8JPgFtmg7_8Th
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt 
from sklearn import linear_model

a=pd.read_csv("/50_Startups.csv")
a.head()

a.tail()

a.describe()

a.info

a.isnull()

a.isnull().sum()

a.shape

a.describe().loc['mean']

a.describe().loc['mean'].plot.bar()

b=a.corr()

b.shape

sns.heatmap(b,annot=True)
plt.show

X=a.drop('Profit', axis=1).values
y=a['Profit'].values
X=a.select_dtypes(include=np.number)
print(X)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.25,random_state=42)

X_train.shape,y_train.shape

X=a.iloc[:,:-1]
y=a.iloc[:,-1]

reg=linear_model.LinearRegression()
reg.fit(X_train,y_train)

from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
y_pred1=reg.predict(X_train)
print(f'Performance of the model on training data :\n')
print(f'MAE = {mean_absolute_error(y_train, y_pred1)}')
print(f'MSE = {mean_squared_error(y_train, y_pred1)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_train, y_pred1))}')
print(f'R_2 = {r2_score(y_train, y_pred1)}')

from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
y_pred2 = reg.predict(X_test)
print(f'Performance of the model on test data :\n')
print(f'MAE = {mean_absolute_error(y_test, y_pred2)}')
print(f'MSE = {mean_squared_error(y_test, y_pred2)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred2))}')
print(f'R_2 = {r2_score(y_test, y_pred2)}')

from sklearn import linear_model
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge

reg=Lasso(alpha=0.1)
reg.fit(X_train,y_train)

from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
y_pred1=reg.predict(X_train)
print(f'Performance of the model on training data :\n')
print(f'MAE = {mean_absolute_error(y_train, y_pred1)}')
print(f'MSE = {mean_squared_error(y_train, y_pred1)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_train, y_pred1))}')
print(f'R_2 = {r2_score(y_train, y_pred1)}')

from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
y_pred2 = reg.predict(X_test)
print(f'Performance of the model on test data :\n')
print(f'MAE = {mean_absolute_error(y_test, y_pred2)}')
print(f'MSE = {mean_squared_error(y_test, y_pred2)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred2))}')
print(f'R_2 = {r2_score(y_test, y_pred2)}')

reg.score(X_test,y_test)

reg=Ridge(alpha=0.1)
reg.fit(X_train,y_train)

from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
y_pred1=reg.predict(X_train)
print(f'Performance of the model on training data :\n')
print(f'MAE = {mean_absolute_error(y_train, y_pred1)}')
print(f'MSE = {mean_squared_error(y_train, y_pred1)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_train, y_pred1))}')
print(f'R_2 = {r2_score(y_train, y_pred1)}')

from sklearn.metrics import mean_absolute_error,r2_score,mean_squared_error
y_pred2 = reg.predict(X_test)
print(f'Performance of the model on test data :\n')
print(f'MAE = {mean_absolute_error(y_test, y_pred2)}')
print(f'MSE = {mean_squared_error(y_test, y_pred2)}')
print(f'RMSE = {np.sqrt(mean_squared_error(y_test, y_pred2))}')
print(f'R_2 = {r2_score(y_test, y_pred2)}')

reg.score(X_test,y_test)